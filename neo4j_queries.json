{
    "queries": [		
        {
            "name": "Kerberoastable Users",
            "shortname": "CYPHER_Kerberoastable_Users",
            "category": "12 - Kerberoasting",
            "query": "MATCH (n:User) WHERE n.hasspn=true AND n.enabled=true RETURN n.name as Username, n.enabled, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, n.description as Description, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPNs"
        },
        {
            "name": "MSSQL - Enabled Computers with MSSQL SPN",
            "shortname": "CYPHER_Computers_MSSQL",
            "category": "15 - Services",
            "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQLSVC/') AND c.enabled=true RETURN c.name as Computer, c.serviceprincipalnames as SPN ORDER BY c.name ASC"
        },
        {
            "name": "HTTP - Enabled Computers with HTTP SPN",
            "shortname": "CYPHER_Computers_MSSQL",
            "category": "15 - Services",
            "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'HTTP/') AND c.enabled=true RETURN c.name as Computer, c.serviceprincipalnames as SPN ORDER BY c.name ASC"
        },
        {
            "name": "SAP - Enabled Computers with SAP SPN",
            "shortname": "CYPHER_Computers_SAP",
            "category": "15 - Services",
            "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'SAP/') AND c.enabled=true RETURN c.name as Computer, c.serviceprincipalnames as SPN ORDER BY c.name ASC"
        },
        {
            "name": "TERMSRV - Enabled Computers with TERMSRV SPN",
            "shortname": "CYPHER_Computers_TERMSRV",
            "category": "15 - Services",
            "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'TERMSRV/') AND c.enabled=true RETURN c.name as Computer, c.serviceprincipalnames as SPN ORDER BY c.name ASC"
        },
        {
            "name": "Kerberoastable with path to High Value Groups",
            "category": "12 - Kerberoasting",
            "shortname": "CYPHER_Kerb_Path_to_HVP",
            "query": "match p=shortestPath((n:User {hasspn:true})-[*1..]->(m:Group {highvalue:true})) where n.enabled = true return distinct n.name as Users, n.enabled AS Enabled, m.name as Group, m.highvalue as HighValue LIMIT 10000"
        },
        {
            "name": "Users with most Compromised objects",
            "shortname": "CYPHER_ACL_OBJECT_OWNER",
            "category": "04 - Object Ownership",
            "query": "MATCH (u:User)-[:Owns]->(n) WHERE u.enabled=true RETURN count(DISTINCT(n.name)) AS OwnedObjects, u.name AS USER ORDER BY count(DISTINCT(n.name)) DESC"
        },
        {
            "name": "First degree object control (TOP 10000)",
            "shortname": "CYPHER_ACL_OBOC_FD_TOP10000",
            "category": "02 - Object control outbound",
            "query": "MATCH p=(u)-[r1]->(n) WHERE r1.isacl=true AND u.enabled=true WITH u.name as name, LABELS(u)[0] as type, COUNT(DISTINCT(n)) as controlled WHERE name IS NOT NULL RETURN name,type, controlled ORDER BY controlled DESC LIMIT 10000"
        },
        {
            "name": "Group delegated object control",
            "shortname": "CYPHER_ACL_OBOC_GD",
            "category": "02 - Object control outbound",
            "query": "MATCH p=(u)-[r1:MemberOf*1..]->(g:Group)-[r2]->(n) WHERE r2.isacl=true WITH u.name as name, u.enabled as Enabled, LABELS(u)[0] as type, g.highvalue as highly_privileged, COUNT(DISTINCT(n)) as controlled WHERE name IS NOT NULL RETURN name,Enabled, type, highly_privileged, controlled ORDER BY controlled DESC LIMIT 10000"
        },
        {
            "name": "ASREPRoasting",
            "shortname": "Users_ASREPRoasting",
            "category": "13 - ASREPRoasting",
            "query": "MATCH (n:User {dontreqpreauth: true}) WHERE n.enabled=true RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.title as Title, n.pwdneverexpires as PasswordNeverExpires, n.passwordnotreqd as PasswordNotRequired, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPNs"
        },
        {
            "name": "User Sessions",
            "shortname": "Users_Sessions",
            "category": "08 - Sessions",
            "query": "MATCH p=(n:User)--(c:Computer)-[:HasSession]->(n) return n.name as User,  c.name as Computer ORDER BY n.name"
        },
        {
            "name": "Users Sessions Count",
            "shortname": "Users_Sessions_Count",
            "category": "08 - Sessions",
            "query": "MATCH p=(n:User)--(c:Computer)-[:HasSession]->(n) return n.name as User, count(*) as Computers ORDER BY Computers DESC"
        },
        {
            "name": "DA Sessions",
            "category": "08 - Sessions",
            "shortname": "CYPHER_DA_Sessions",
            "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return n.name as Username, c.name as Computer"
        },
        {
            "name": "Unsupported OS",
            "category": "05 - Low hanging fruits",
            "shortname": "CYPHER_Unsupported_OS",
            "query": "MATCH (c:Computer) WHERE c.operatingsystem =~ '.*(2000|2003|2008|xp|vista|7|me).*' AND c.enabled=true RETURN c.name as Computer, c.operatingsystem as UnsupportedOS, c.enabled as Enabled, toString(datetime({epochSeconds: ToInteger(coalesce(c.lastlogon,0))})) as LastLogon"
        },
        {
            "name": "Direct Relationships - Users in default groups",
            "category": "05 - Low hanging fruits",
            "shortname": "CYPHER_Relationships_Everyone",
            "query": "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND n.enabled=true  WITH g.name AS Source, type(r) as Relationship,n.name as Target, n.enabled as Enabled WHERE g.objectid ENDS WITH '-546' OR g.objectid ENDS WITH '-545' OR g.objectid ENDS WITH '-515' OR g.objectid ENDS WITH '-513' OR g.objectid ENDS WITH 'S-1-5-32-554' OR g.objectid ENDS WITH 'S-1-1-0' OR g.objectid ENDS WITH 'S-1-5-11' RETURN Source, Relationship, Target, Enabled"
        },
        {
            "name": "Direct Relationships - Compromised objects - Direct (COUNT)",
            "shortname": "CYPHER_ACL_OBOC_FD_TOP10000_owned_COUNT",
            "category": "02 - Object control outbound",
            "query": "MATCH p=(u)-[r1]->(n) WHERE r1.isacl=true AND u.enabled=true AND u.owned=true WITH u.name as name, LABELS(u)[0] as type, COUNT(DISTINCT(n)) as controlled WHERE name IS NOT NULL RETURN name,type, controlled ORDER BY controlled DESC"
        },
        {
            "name": "Direct Relationships - Compromised objects - Direct",
            "category": "05 - Low hanging fruits",
            "shortname": "CYPHER_Relationships_OwnedObjects",
            "query": "MATCH (u)-[r1]->(n) WHERE r1.isacl = true AND u.name AND n.highvalue=true IS NOT NULL AND u.enabled = true AND u.owned = true AND n.enabled = true WITH u.name as SourceName, LABELS(u)[0] as SourceType, type(r1) as RelationshipType, n.name as TargetName, LABELS(n)[0] as TargetType RETURN DISTINCT SourceName, SourceType, RelationshipType, TargetName, TargetType LIMIT 10000"
        },
        {
            "name": "Direct Relationships - Compromised objects - Group delegated (COUNT)",
            "category": "05 - Low hanging fruits",
            "shortname": "CYPHER_Relationships_OwnedObjects-gd-count",
            "query": "MATCH (u {enabled: true, owned: true})-[r1:MemberOf*1..]->(g:Group)-[r2 {isacl: true}]->(n) WHERE u.name IS NOT NULL WITH u.name as name, LABELS(u)[0] as ObjectType, n.highvalue as HighValueObject, COUNT(DISTINCT(n)) as controlled RETURN name, ObjectType, HighValueObject, controlled ORDER BY controlled DESC LIMIT 10000"
        },
        {
            "name": "Direct Relationships - Compromised objects - Group delegated",
            "category": "05 - Low hanging fruits",
            "shortname": "CYPHER_Relationships_OwnedObjects-gd",
            "query": "MATCH (u {enabled: true, owned: true})-[r1:MemberOf*1..]->(g:Group)-[r2 {isacl: true}]->(n) WHERE u.name IS NOT NULL WITH u.name as SourceName, LABELS(u)[0] as SourceType, type(r2) as RelationshipType, n.name as TargetName, LABELS(n)[0] as TargetType RETURN DISTINCT SourceName, SourceType, RelationshipType, TargetName, TargetType LIMIT 10000"
        },       
        {
            "name": "Sessions of users that are members of High Value groups",
            "category": "08 - Sessions",
            "shortname": "CYPHER_EA_Sessions",
            "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-519' MATCH p = (c:Computer)-[:HasSession]->(n) return n.name as Username, c.name as Computer"
        },
        {
            "name": "Domain Users with path to DA",
            "shortname": "DU_path_DA",
            "category": "06 - Domain Users",
            "query": "MATCH p=ShortestPath((n:Group)-[*1..]->(m:Group)) WHERE n.name STARTS WITH 'DOMAIN USERS' and m.name CONTAINS 'DOMAIN ADMINS' AND n <> m RETURN p"
        },
        {
            "name": "Users Computer Direct Admin privileges to computers",
            "shortname": "CYPHER_Users_with_Direct_Admin_Privilieges",
            "category": "07 - Admins",
            "query": "MATCH (u:User)-[:AdminTo]->(c:Computer) RETURN count(DISTINCT(c.name)) AS COMPUTER, u.name AS USER ORDER BY count(DISTINCT(c.name)) DESC"
        },
        {
            "name": "Privileged Build in groups and their member count",
            "shortname": "CYPHER_Users_with_buildin_groups_member_count",
            "category": "07 - Admins",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ '(?i)S-1-5-.*-519' OR g.objectid =~ '(?i)S-1-5-.*-512' OR g.objectid =~ '(?i)S-1-5-.*-518' OR g.objectid =~ '(?i)S-1-5-.*-516' OR g.objectid =~ '(?i)S-1-5-.*-517' OR g.objectid =~ '(?i)S-1-5-.*-520' OR g.objectid =~ '(?i)S-1-5-.*-521' OR g.objectid =~ '(?i)S-1-5-.*-525' OR g.objectid =~ '(?i)S-1-5-.*-526' OR g.objectid =~ '(?i)S-1-5-.*-527' OR g.objectid = 'S-1-5-32-544' OR g.objectid = 'S-1-5-32-548' OR g.objectid = 'S-1-5-32-549' OR g.objectid = 'S-1-5-32-550' OR g.objectid = 'S-1-5-32-551' OR g.objectid = 'S-1-5-32-580' OR g.objectid = 'S-1-5-32-578' OR g.name = 'DnsAdmins' OR g.name = 'Exchange Windows Permissions' RETURN g.name AS GroupName, count(u) AS MembersCounted"
        },
        {
            "name": "Privileged Build in groups and their members",
            "shortname": "CYPHER_Users_with_buildin_groups_members",
            "category": "07 - Admins",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ '(?i)S-1-5-.*-519' OR g.objectid =~ '(?i)S-1-5-.*-512' OR g.objectid =~ '(?i)S-1-5-.*-518' OR g.objectid =~ '(?i)S-1-5-.*-516' OR g.objectid =~ '(?i)S-1-5-.*-517' OR g.objectid =~ '(?i)S-1-5-.*-520' OR g.objectid =~ '(?i)S-1-5-.*-521' OR g.objectid =~ '(?i)S-1-5-.*-525' OR g.objectid =~ '(?i)S-1-5-.*-526' OR g.objectid =~ '(?i)S-1-5-.*-527' OR g.objectid = 'S-1-5-32-544' OR g.objectid = 'S-1-5-32-548' OR g.objectid = 'S-1-5-32-549' OR g.objectid = 'S-1-5-32-550' OR g.objectid = 'S-1-5-32-551' OR g.objectid = 'S-1-5-32-580' OR g.objectid = 'S-1-5-32-578' OR g.name = 'DnsAdmins' OR g.name = 'Exchange Windows Permissions' RETURN g.name AS GroupName, u.name, u.enabled as Enabled, LABELS(u)[0] as ObjectType ORDER BY GroupName"
        },
        {
            "name": "Groups that contain the word admin/adm and their member count",
            "shortname": "CYPHER_Groups_contain_adm_count",
            "category": "07 - Admins",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)admin|adm).*' RETURN g.name AS GroupName, COUNT(u) AS MemberCount ORDER BY g.name"
        },
        {
            "name": "Groups that contain the word admin/adm and their members (TOP 1000)",
            "shortname": "CYPHER_Groups_contain_adm",
            "category": "07 - Admins",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)admin|adm).*' RETURN g.name AS GroupName, u.name, LABELS(u)[0] as type, u.enabled as Enabled ORDER BY GroupName LIMIT 1000"
        },
        {
            "name": "VPN - Groups that contain the word VPN and their member count",
            "shortname": "CYPHER_Groups_contain_vpn",
            "category": "15 - Services",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)vpn).*' RETURN g.name AS GroupName, COUNT(u) AS MemberCount ORDER BY g.name"
        },
        {
            "name": "VPN - Groups that contain the word VPN and their members (TOP 1000)",
            "shortname": "CYPHER_Groups_contain_vpn",
            "category": "15 - Services",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)vpn).*' RETURN g.name AS GroupName, u.name, LABELS(u)[0] as type, u.enabled as Enabled ORDER BY GroupName LIMIT 1000"
        },
        {
            "name": "MSSQL - Groups that contain the word SQL and their member count",
            "shortname": "CYPHER_Groups_contain_SQL_count",
            "category": "15 - Services",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)sql).*' RETURN g.name AS GroupName, COUNT(u) AS MemberCount ORDER BY g.name"
        },
        {
            "name": "MSSQL - Groups that contain the word SQL and their members (TOP 1000)",
            "shortname": "CYPHER_Groups_contain_SQL",
            "category": "15 - Services",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)sql).*' RETURN g.name AS GroupName, u.name, LABELS(u)[0] as type, u.enabled as Enabled ORDER BY GroupName LIMIT 1000"
        },
        {
            "name": "Groups that contain the word service/svc and their member count",
            "shortname": "CYPHER_Groups_contain_service_count",
            "category": "15 - Services",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)svc|service).*' RETURN g.name AS GroupName, COUNT(u) AS MemberCount ORDER BY g.name"
        },
        {
            "name": "Groups that contain the word service/svc and their members (TOP 1000)",
            "shortname": "CYPHER_Groups_contain_service",
            "category": "15 - Services",
            "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.name =~ '.*((?i)svc|service).*' RETURN g.name AS GroupName, u.name, LABELS(u)[0] as type, u.enabled as Enabled ORDER BY GroupName LIMIT 1000"
        },
        {
            "name": "Users Computer Indirect Admin privileges to computers",
            "shortname": "CYPHER_Users_with_Indirect_Admin_Privilieges",
            "category": "07 - Admins",
            "query": "MATCH (u:User)-[:AdminTo]->(c:Computer) RETURN count(DISTINCT(c.name)) AS COMPUTER, u.name AS USER ORDER BY count(DISTINCT(c.name)) DESC"
        },
        {
            "name": "Inbound object control",
            "shortname": "CYPHER_Inbound_Object_Control",
            "category": "03 - Object control inbound",
            "query": "MATCH (u:User) MATCH (n)-[r]->(u) WHERE r.isacl = true WITH u.name as name, u.objectid as objectid, COUNT(DISTINCT n) as inbound_control_count RETURN name, objectid, inbound_control_count ORDER BY inbound_control_count DESC LIMIT 10000"
        },
        {
            "name": "ADCS - Templates",
            "shortname": "CYPHER_ADCS_Templates",
            "category": "15 - Services",
            "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n.`Display Name` as Name, n.highvalue as HighValue, n.Enabled as Enabled, n.`Enrollee Supplies Subject` as EnroleeSuppliesSjb, n.domain as Domain, n.`Extended Key Usage` as `Key Usage`"
        },
        {
            "name": "ADCS - Certificate Authorities",
            "shortname": "CYPHER_ADCS_Authorities",
            "category": "15 - Services",
            "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n.`DNS Name` as DNS, n.`CA Name` as Name, n.domain as Domain, n.`Web Enrollment` as `Web Enrollment`"
        },
        {
            "name": "ADCS - Certificate Enrollment Rights",
            "shortname": "CYPHER_ADCS_ENROLLMENT_RIGHTS",
            "category": "15 - Services",
            "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO) WHERE n.type = 'Certificate Template' return n.`Display Name` as Template, n.Enabled as Enabled, g.name as `Enrollment Rights`"
        },
        {
            "name": "ADCS - Certificate Template vulnerable to ESC1",
            "shortname": "CYPHER_ADCS_ESC1",
            "category": "15 - Services",
            "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs"
        },
        {
            "name": "ADCS - Certificate Template vulnerable to ESC2",
            "shortname": "CYPHER_ADCS_ESC2",
            "category": "15 - Services",
            "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs"
        },
        {
            "name": "ADCS - Certificate Template vulnerable to ESC3",
            "shortname": "CYPHER_ADCS_ESC3",
            "category": "15 - Services",
            "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs"
        },
        {
            "name": "ADCS - Certificate Template vulnerable to ESC6",
            "shortname": "CYPHER_ADCS_ESC6",
            "category": "15 - Services",
            "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs"
        },
        {
            "name": "ADCS - Certificate Template vulnerable to ESC8",
            "shortname": "CYPHER_ADCS_ESC8",
            "category": "15 - Services",
            "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs"
        },
        {
            "name": "AD objects with unconstrained delegation configured",
            "category": "09 - Computers",
            "shortname": "CYPHER_DU_Unconstrained",
            "query": "MATCH (c1)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2.name as ObjectName,c2.enabled as Enabled, LABELS(c2)[0] as ObjectType,c2.unconstraineddelegation as UnconstrainedDelegation ORDER BY c2.name ASC"
        },
        {
            "name": "Enabled computer objects with LastLogon date",
            "category": "09 - Computers",
            "shortname": "CYPHER_DU_Enabled_Computers",
            "query": "MATCH (c:Computer) WHERE c.enabled = TRUE RETURN c.name as ObjectName, toString(datetime({epochSeconds: ToInteger(coalesce(c.lastlogon,0))})) as LastLogon, replace(c.name, '$@', '.') as DNSHostName ORDER BY LastLogon DESC LIMIT 5000"
        },
        {
            "name": "Users/Groups with Password reset privileges",
            "category": "10 - Passwords",
            "shortname": "CYPHER_Password_resetters",
            "query": "MATCH p=(m)-[r:ForceChangePassword]->(n:User) RETURN m.name as Object, m.distinguishedname as DN, count(*) as Users ORDER BY Users DESC"
        },
        {
            "name": "Users With 5 Year Old Passwords",
            "category": "10 - Passwords",
            "shortname": "CYPHER_Users_5YrOldPW",
            "query": "WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE n.enabled = true AND date_now - toInteger(n.pwdlastset) > 315360000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"
        },
        {
            "name": "Users With 10 Year Old Passwords",
            "category": "10 - Passwords",
            "shortname": "CYPHER_Users_10YrOldPW",
            "query": "WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE n.enabled = true AND date_now - toInteger(n.pwdlastset) > 315360000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"
        },
        {
            "name": "Users with Userpassword attribute set",
            "category": "10 - Passwords",
            "shortname": "CYPHER_Users_Userpassword",
            "query": "MATCH (u:User) WHERE NOT u.userpassword IS null RETURN u.name as User, u.userpassword as Password, u.enabled as Enabled"
        },
        {
            "name": "Users that have never logged in",
            "category": "11 - Hygiene",
            "shortname": "CYPHER_Users_NeverActive",
            "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n.name as Username,toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.name"
        },
        {
            "name": "Users with Password Never Expires attribute set",
            "category": "11 - Hygiene",
            "shortname": "CYPHER_Users_PWNeverExpireExcept",
            "query": "MATCH (n:User) WHERE n.pwdneverexpires RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon"
        },
        {
            "name": "Users with Password Not Required attribute set",
            "category": "10 - Passwords",
            "shortname": "CYPHER_Users_PWNeverExpireExcept",
            "query": "MATCH (n:User) WHERE n.pwdneverexpires RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon"
        },
        {
            "name": "Domains",
            "category": "01 - Forest",
            "shortname": "CYPHER_Domains_Listing",
            "query": "MATCH (n:Domain) return n.name as Domain, n.functionallevel as FunctionalLevel, n.highvalue as HighValue, n.domain as DNS, n.distinguishedname as DN, n.domainsid as SID"
        },
        {
            "name": "Domain Trusts",
            "category": "01 - Forest",
            "shortname": "CYPHER_Domain_Trusts",
            "query": "MATCH p=(n:Domain)-[r:TrustedBy]->(m:Domain) RETURN n.name as Domain1, r.trusttype as TrustType, r.isacl as IsACL, r.sidfiltering as SidFiltering, r.transitive as transitive, m.name as Domain2 order by n.name, m.name"
        },
        {
            "name": "Domain Controllers",
            "category": "01 - Forest",
            "shortname": "CYPHER_Domain_Controllers",
            "query": "MATCH (c:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' RETURN c.name as Hostname, c.operatingsystem as OS, c.description as Description, toString(datetime({epochSeconds: ToInteger(coalesce(c.whencreated,0))})) as Created, c.haslaps as LAPS, c.enabled as Enabled, c.distinguishedname as DN"
        },
        {
            "name": "Cross Domain Relationships (LIMIT 5000)",
            "category": "01 - Forest",
            "shortname": "CYPHER_CrossDomainRels",
            "query": "MATCH (n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN n.name as SourceName, LABELS(n)[0] as SourceType, TYPE(r) as Relationship, m.name as TargetName, LABELS(m)[0] as TargetType LIMIT 5000"
        },
        {
            "name": "Group Policy Objects",
            "category": "16 - GPOs",
            "shortname": "CYPHER_GPOs",
            "query": "Match (n:GPO) return n.name as GPO, n.highvalue as HighValue, n.gpcpath as Path LIMIT 5000"
        },
        {
            "name": "GPO Creator Owners",
            "category": "16 - GPOs",
            "shortname": "CYPHER_GPOCreatorOwners",
            "query": "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-520' RETURN m.name as Name, m.displayname as DisplayName, m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation LIMIT 5000"
        },
        {
            "name": "LAPS Deployment Count",
            "category": "14 - LAPS",
            "shortname": "CYPHER_LAPSDeploymentCount",
            "query": "MATCH (c:Computer) RETURN c.haslaps as LAPSEnabled, count(*) as Computers ORDER BY Computers DESC LIMIT 5000"
        },
        {
            "name": "LAPS Deployment OS Count",
            "category": "14 - LAPS",
            "shortname": "CYPHER_LAPSDeploymentOSCount",
            "query": "MATCH (c:Computer) RETURN c.haslaps as LAPSEnabled, c.operatingsystem as OS, count(*) as Computers ORDER BY LAPSEnabled DESC, Computers DESC LIMIT 5000"
        },
        {
            "name": "LAPS Not Enabled",
            "category": "14 - LAPS",
            "shortname": "CYPHER_LAPSNotEnabled",
            "query": "MATCH (c:Computer) WHERE c.haslaps=false and c.enabled=true RETURN c.name as Computer, c.enabled as Enabled, c.operatingsystem as OS,c.haslaps as LAPSEnabled, toString(datetime({epochSeconds: ToInteger(coalesce(c.lastlogon,0))})) as LastLogon, c.description as Descirption ORDER BY Computer"
        },
        {
            "name": "Hunt - Users with Pass or PW in Description",
            "category": "10 - Passwords",
            "shortname": "CYPHER_HuntUsersWithPassInDesc",
            "query": "MATCH (n:User) WHERE n.description  =~ '(?i).*(pass|pw).*' RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon LIMIT 5000"
        },
        {
            "name": "Hunt - Computers with Pass or PW in Description",
            "category": "10 - Passwords",
            "shortname": "CYPHER_HuntComputersWithPassInDesc",
            "query": "MATCH (n:Computer) WHERE n.description =~ '(?i).*(pass|pw).*' RETURN n.name as Name, n.domain, n.enabled as Enabled,n.haslaps as LAPS, n.highvalue as HighValue,n.operatingsystem as OS,  n.description as Description, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon,n.serviceprincipalnames as SPN ORDER BY n.highvalue DESC , n.name ASC LIMIT 5000"
        },
        {
            "name": "RDP - RDPable Servers",
            "category": "15 - Services",
            "shortname": "CYPHER_RDPServers",
            "query": "MATCH (g:Group)-[:CanRDP]->(c:Computer) WHERE g.objectid ENDS WITH '-513' AND c.operatingsystem CONTAINS 'Server' RETURN c.name AS Computer LIMIT 5000"
        },
        {
            "name": "RDP - Groups",
            "category": "15 - Services",
            "shortname": "CYPHER_RDPGroups",
            "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN m.name as Group, count(*) as Computer ORDER BY Computer DESC LIMIT 5000"
        },
        {
            "name": "RDP - Users",
            "category": "15 - Services",
            "shortname": "CYPHER_RDPUsers",
            "query": "MATCH p=(m:User)-[r:CanRDP]->(n:Computer) RETURN m.User as User, count(*) as Computer ORDER BY Computer DESC LIMIT 5000"
        }
	]
}
